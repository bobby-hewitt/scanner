{"version":3,"sources":["Contexts/global.js","Containers/Home/index.js","Containers/NotFound/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Context","createContext","Provider","Home","props","state","delay","result","handleScan","bind","data","this","setState","err","console","error","style","height","width","onError","handleError","onScan","Component","NotFound","className","routes","MyApp","useRoutes","ProviderComponent","useState","egState","setEgState","value","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPACMA,EAAUC,wBAAc,IACjBC,EAAWF,EAAQE,S,uEC2CjBC,E,YAtCb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,IACPC,OAAQ,aAGV,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAPF,E,wEASPC,GACTC,KAAKC,SAAS,CACZL,OAAQG,M,kCAGAG,GACVC,QAAQC,MAAMF,K,+BAQd,OACE,6BACE,kBAAC,IAAD,CACEP,MAAOK,KAAKN,MAAMC,MAClBU,MATe,CACnBC,OAAQ,IACRC,MAAO,KAQHC,QAASR,KAAKS,YACdC,OAAQV,KAAKH,aAEf,2BAAIG,KAAKN,MAAME,a,GAhCJe,aCIJC,EARE,WAChB,OACC,yBAAKC,UAAU,iBAAf,QCDIC,EAAS,CACX,IAAK,kBAAM,kBAAC,EAAD,QAQAC,EALD,WAEV,OADoBC,oBAAUF,IACR,kBAAC,EAAD,OCSXG,EAdW,SAAAxB,GAAU,IAAD,EACHyB,qBADG,mBAC1BC,EAD0B,KACjBC,EADiB,KAEjC,OACG,kBAAC7B,EAAD,CACG8B,MAAO,CACLF,UACAC,eAGH,kBAAC,EAAD,QCDaE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.94a0517e.chunk.js","sourcesContent":["import { createContext } from 'react'\nconst Context = createContext({})\nexport const Provider = Context.Provider\nexport default Context","import React, { Component } from 'react'\nimport Context from 'Contexts/global'\nimport './style.scss'\nimport QrReader from 'react-qr-scanner'\n\n\nclass Home extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      delay: 100,\n      result: 'No result',\n    }\n \n    this.handleScan = this.handleScan.bind(this)\n  }\n  handleScan(data){\n    this.setState({\n      result: data,\n    })\n  }\n  handleError(err){\n    console.error(err)\n  }\n  render(){\n    const previewStyle = {\n      height: 240,\n      width: 320,\n    }\n \n    return(\n      <div>\n        <QrReader\n          delay={this.state.delay}\n          style={previewStyle}\n          onError={this.handleError}\n          onScan={this.handleScan}\n          />\n        <p>{this.state.result}</p>\n        \n      </div>\n    )\n  }\n}\n\nexport default Home","import React from 'react'\n\nconst NotFound = () => {\n\treturn (\n\t\t<div className=\"homeContainer\">\n\t\t\t404\n\t\t</div>\n\t)   \n}\n\nexport default NotFound","import React from 'react'\nimport {useRoutes} from 'hookrouter';\nimport { Home, NotFound } from 'Containers'\nconst routes = {\n    '/': () => <Home />\n};\n  \nconst MyApp = () => {\n    const routeResult = useRoutes(routes);\n    return routeResult || <NotFound />;\n}\n\nexport default MyApp","import React, { useState } from \"react\";\nimport { Provider } from \"./Contexts/global\";\nimport initialState from './initialState'\nimport Routes from './routes'\nconst ProviderComponent = props => {  \n  const [egState, setEgState] = useState();\n  return (\n     <Provider\n        value={{\n          egState,\n          setEgState\n        }}\n      >\n       <Routes />\n    </Provider>\n  );\n};\n\nexport default ProviderComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}